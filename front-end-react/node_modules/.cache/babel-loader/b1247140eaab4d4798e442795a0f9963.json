{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arihant\\\\Desktop\\\\git projects\\\\react-covid-tracker-master\\\\src\\\\util.js\";\nimport React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\nconst casesTypeColors = {\n  revenue: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 12000\n  },\n  customers: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200\n  },\n  vendors: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 1000\n  }\n};\nexport const sortData = data => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\nexport const prettyPrintStat = stat => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\nexport const showDataOnMap = (data, casesType = \"revenue\") => data.map(country => /*#__PURE__*/React.createElement(Circle, {\n  center: [country[\"apac\"], country[\"apac\"]],\n  color: casesTypeColors[casesType].hex,\n  fillColor: casesTypeColors[casesType].hex,\n  fillOpacity: 0.1,\n  radius: Math.log2(country[casesType]) * casesTypeColors[casesType].multiplier,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Popup, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-container\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-name\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 11\n  }\n}, country.country), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-confirmed\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 11\n  }\n}, \"Cases: \", numeral(country.cases).format(\"0,0\")), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-recovered\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 11\n  }\n}, \"Recovered: \", numeral(country.recovered).format(\"0,0\")), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-deaths\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 11\n  }\n}, \"Deaths: \", numeral(country.deaths).format(\"0,0\"))))));\nexport const showNewDataOnMap = (data, casesType = \"revenue\") => {\n  console.log(data[0]);\n  const mapItem = [];\n  const mapRegion = data[0];\n\n  for (let key in mapRegion) {\n    mapItem.push( /*#__PURE__*/React.createElement(Circle, {\n      center: mapRegion[key],\n      color: casesTypeColors[casesType].hex,\n      fillColor: casesTypeColors[casesType].hex,\n      fillOpacity: 0.1,\n      radius: Math.sqrt(getTotalValue(data, casesType)) * casesTypeColors[casesType].multiplier,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  return mapItem;\n};\n\nconst getTotalValue = (data, casesType) => {\n  if (casesType === \"customers\") {\n    data = data[2];\n  } else if (casesType === \"vendors\") {\n    data = data[3];\n  } else {\n    data = data[1];\n  }\n\n  var total = 0;\n\n  for (let key in data) {\n    total = total + data[key];\n  }\n\n  return total;\n};","map":{"version":3,"sources":["C:/Users/Arihant/Desktop/git projects/react-covid-tracker-master/src/util.js"],"names":["React","numeral","Circle","Popup","casesTypeColors","revenue","hex","rgb","half_op","multiplier","customers","vendors","sortData","data","sortedData","sort","a","b","cases","prettyPrintStat","stat","format","showDataOnMap","casesType","map","country","Math","log2","recovered","deaths","showNewDataOnMap","console","log","mapItem","mapRegion","key","push","sqrt","getTotalValue","total"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  revenue: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 12000,\n  },\n  customers: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  vendors: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 1000,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"revenue\") =>\n  data.map((country) => (\n    <Circle\n      center={[country[\"apac\"], country[\"apac\"]]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.1}\n      radius={\n        Math.log2(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n\nexport const showNewDataOnMap = (data, casesType = \"revenue\") => {\n  console.log(data[0]);\n  const mapItem = [];\n  const mapRegion = data[0];\n  for (let key in mapRegion) {\n    mapItem.push(\n      <Circle\n        center={mapRegion[key]}\n        color={casesTypeColors[casesType].hex}\n        fillColor={casesTypeColors[casesType].hex}\n        fillOpacity={0.1}\n        radius={\n          Math.sqrt(getTotalValue(data, casesType)) *\n          casesTypeColors[casesType].multiplier\n        }\n      ></Circle>\n    );\n  }\n  return mapItem;\n};\n\nconst getTotalValue = (data, casesType) => {\n  if (casesType === \"customers\") {\n    data = data[2];\n  } else if (casesType === \"vendors\") {\n    data = data[3];\n  } else {\n    data = data[1];\n  }\n  var total = 0;\n  for (let key in data) {\n    total = total + data[key];\n  }\n  return total;\n};\n"]},"metadata":{},"sourceType":"module"}