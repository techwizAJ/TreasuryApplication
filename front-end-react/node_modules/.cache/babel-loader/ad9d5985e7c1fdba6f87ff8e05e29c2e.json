{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arihant\\\\Desktop\\\\git projects\\\\react-covid-tracker-master\\\\src\\\\util.js\";\nimport React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\nconst casesTypeColors = {\n  revenue: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 12000\n  },\n  customers: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 12000\n  },\n  vendors: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 12000\n  }\n};\nexport const prettyPrintStat = stat => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\nexport const showDataOnMap = (data, casesType = \"revenue\") => data.map(country => /*#__PURE__*/React.createElement(Circle, {\n  center: [country[\"apac\"], country[\"apac\"]],\n  color: casesTypeColors[casesType].hex,\n  fillColor: casesTypeColors[casesType].hex,\n  fillOpacity: 0.8,\n  radius: Math.log2(country[casesType]) * casesTypeColors[casesType].multiplier,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Popup, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-container\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-name\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 11\n  }\n}, country.country), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-confirmed\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 11\n  }\n}, \"Cases: \", numeral(country.cases).format(\"0,0\")), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-recovered\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 11\n  }\n}, \"Recovered: \", numeral(country.recovered).format(\"0,0\")), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"info-deaths\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 11\n  }\n}, \"Deaths: \", numeral(country.deaths).format(\"0,0\"))))));\nexport const showNewDataOnMap = (data, casesType = \"revenue\") => {\n  console.log(data[0]);\n  const mapItem = [];\n  const mapRegion = data[0];\n\n  for (let key in mapRegion) {\n    mapItem.push( /*#__PURE__*/React.createElement(Circle, {\n      center: mapRegion[key],\n      color: casesTypeColors[casesType].hex,\n      fillColor: casesTypeColors[casesType].hex,\n      fillOpacity: 0.8,\n      radius: Math.log2(getTotalValue(data, casesType, key)) * casesTypeColors[casesType].multiplier * 2.5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Popup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, key), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-confirmed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, \"Total \", casesType, \" \", numeral(getTotalValue(data, casesType, key)).format(\"0,0\"))))));\n  }\n\n  return mapItem;\n};\n\nconst getTotalValue = (data, casesType, region) => {\n  if (casesType === \"customers\") {\n    data = data[2];\n  } else if (casesType === \"vendors\") {\n    data = data[3];\n  } else {\n    data = data[1];\n  }\n\n  var total = 1;\n  total = data[region] != null ? data[region] : 10;\n  return total;\n};","map":{"version":3,"sources":["C:/Users/Arihant/Desktop/git projects/react-covid-tracker-master/src/util.js"],"names":["React","numeral","Circle","Popup","casesTypeColors","revenue","hex","rgb","half_op","multiplier","customers","vendors","prettyPrintStat","stat","format","showDataOnMap","data","casesType","map","country","Math","log2","cases","recovered","deaths","showNewDataOnMap","console","log","mapItem","mapRegion","key","push","getTotalValue","region","total"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  revenue: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 12000,\n  },\n  customers: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 12000,\n  },\n  vendors: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 12000,\n  },\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"revenue\") =>\n  data.map((country) => (\n    <Circle\n      center={[country[\"apac\"], country[\"apac\"]]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.8}\n      radius={\n        Math.log2(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n\nexport const showNewDataOnMap = (data, casesType = \"revenue\") => {\n  console.log(data[0]);\n  const mapItem = [];\n  const mapRegion = data[0];\n  for (let key in mapRegion) {\n    mapItem.push(\n      <Circle\n        center={mapRegion[key]}\n        color={casesTypeColors[casesType].hex}\n        fillColor={casesTypeColors[casesType].hex}\n        fillOpacity={0.8}\n        radius={\n          Math.log2(getTotalValue(data, casesType, key)) *\n          casesTypeColors[casesType].multiplier *\n          2.5\n        }\n      >\n        <Popup>\n          <div className=\"info-container\">\n            <div className=\"info-name\">{key}</div>\n            <div className=\"info-confirmed\">\n              Total {casesType}{\" \"}\n              {numeral(getTotalValue(data, casesType, key)).format(\"0,0\")}\n            </div>\n          </div>\n        </Popup>\n      </Circle>\n    );\n  }\n  return mapItem;\n};\n\nconst getTotalValue = (data, casesType, region) => {\n  if (casesType === \"customers\") {\n    data = data[2];\n  } else if (casesType === \"vendors\") {\n    data = data[3];\n  } else {\n    data = data[1];\n  }\n  var total = 1;\n  total = data[region] != null ? data[region] : 10;\n  return total;\n};\n"]},"metadata":{},"sourceType":"module"}